//PARTIE 1 : Comment accéder au fichier HTML depuis JavaScript
console.log("Hello world"); //On affiche dans la console du navigateur le message "Hello world"
console.log(document); //On affiche en console l'objet "document", cet objet correspond au fichier HTML
console.log(document.body); //On affiche en console l'attribut "body" de l'objet "document", cet attribut correspond à l'élément HTML "body"

//PARTIE 2 : Comment accéder à un élément HTML grâce à son ID
let html_element_container_1 = document.getElementById("container_1"); //On stocke dans une variable l'élément HTML dont l'id est "container_1"
console.log(html_element_container_1.innerHTML); //On affiche en console le contenu HTML de l'élément HTML dont l'id est "container_1"
console.log(html_element_container_1.textContent); //On affiche en console le texte contenu dans l'élément HTML dont l'id est "container_1"

//PARTIE 3 : Comment modifier le texte contenu dans un élément HTML
let html_element_title_2 = document.getElementById("title_2"); //On stocke dans une variable l'élément HTML dont l'id est "title_2"
html_element_title_2.textContent = "Hi!"; //On modifie le texte de l'élément HTML dont l'id est "title_2"

//PARTIE 4 : Comment accéder à l'ensemble des éléments HTML de même type (par exemple : tous les "div")
let html_elements_div = document.getElementsByTagName("div"); //On stocke dans une variable la liste des éléments HTML de type "div"
console.log(html_elements_div); //On affiche en console la liste des éléments HTML de type "div"

//PARTIE 5 : Comment accéder à un ensemble d'éléments en fonction d'une classe
let html_elements_class_lorem = document.getElementsByClassName("lorem"); //On stocke dans une variable la liste des éléments HTML possédant la classe "lorem"
console.log(html_elements_class_lorem); //On affiche en console la liste des éléments HTML possédant la classe "lorem"

//PARTIE 6 : Comment modifier le contenu HTML d'un élément
let html_element_container_3 = document.getElementById("container_3"); //On stocke dans une variable l'élément HTML dont l'id est "container_3"
html_element_container_3.innerHTML = '<h1>"New title generated by JavaScript!"</h1>'; //On modifie le contenu HTML de l'élément dont l'id est "container_3"

//PARTIE 7 : Comment manipuler les classes d'un élément HTML
console.log(html_element_title_2.classList); //On affiche en console la liste des classes de l'élément HTML dont l'id est "title_2"
console.log(html_element_title_2.classList.contains("container")); //On affiche en console un booléen indiquant si l'élément dont l'id est "title_2" possède la classe nommée "container"
console.log(html_element_title_2.classList.contains("fake_title")); //On affiche en console un booléen indiquant si l'élément dont l'id est "title_2" possède la classe nommée "fake_title"
html_element_container_3.classList.add("js_generated_class"); //On ajoute une classe nommée "js_generated_class" a l'élément HTML dont l'id est "container_3"
html_element_container_3.classList.remove("useless_class"); //On supprime la classe nommée "useless_class" a l'élément HTML dont l'id est "container_3"

//PARTIE 8 : Comment accéder aux propriétés CSS d'un élément HTML
html_element_title_2.style.color = "blue"; //On change le style de l'élément HTML dont l'id est "title_2" (la propriété "color" a alors pour valeur "blue")
console.log(html_element_title_2.style.color); //On affiche en console la valeur de la propriété "color" de l'élément HTML dont l'id est "title_2"

//PARTIE 9 : Comment générer un élément HTML avec JavaScript
html_element_new_paragraph = document.createElement("p"); //On créé un élément HTML de type Paragraphe ("p")
html_element_new_paragraph.textContent = "New paragraph created with JavaScript"; //On modifie le texte de l'élément que l'on vient de créer
html_element_container_3.appendChild(html_element_new_paragraph); //On ajoute ce paragraphe au div dont l'id est "container_3"

//PARTIE 10 : Comment accéder aux propriétés CSS d'un élément HTML (2e exemple)
html_element_new_button = document.createElement("input"); //On créé un élément HTML de type "input"
html_element_new_button.type = "button"; //On indique que cet "input" doit être un bouton
html_element_new_button.value = "New button"; //On modifie le texte qui va être affiché sur le bouton
html_element_container_3.appendChild(html_element_new_button); //On ajoute ce bouton au div dont l'id est "container_3"

//PARTIE 11 : Comment gérer l'interaction avec un élément HTML
//On ajoute un écouteur d'événement au bouton, permettant de définir ce qu'il se passe lorsqu'on clique sur ce bouton
html_element_new_button.addEventListener("click", function() {
  console.log("The button has been clicked!"); //Lorsqu'on clique sur le bouton, on affiche le message "The button has been clicked!"
}, true);
